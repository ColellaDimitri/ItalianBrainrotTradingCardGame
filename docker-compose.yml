version: "3.9"

services:
  db:
    image: postgres:16
    container_name: app-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "8082:5432" # host 8082 -> container 5432
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app-web
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8081:3000" # host 8081 -> container 3000

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: app-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: "True"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8083:80" # host 8083 -> container 80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      # Optionnel: prÃ©configurer un serveur (voir fichier ci-dessous)
      # - ./pgadmin/servers.json:/pgadmin4/servers.json:ro

volumes:
  db_data:
  pgadmin_data:
